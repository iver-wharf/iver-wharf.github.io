{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Wharf configuration schema (.wharf-ci.yml)",
    "type": "object",
    "properties": {
        "environments": {
            "type": "object",
            "title": "Wharf build environment variables definitions",
            "description": "Wharf environment variables per environment available when starting a build for this project. The 'environments' property inside each stage refers to the property name as defined here directly under this global 'environments' map/object.",
            "additionalProperties": {
                "type": "object",
                "title": "Map/object of environment variables",
                "description": "Each variable defined here can later be used inside most fields and inside referenced files (for example, inside kubectl.file) when written in the format of ${name-of-variable}. A simple string substitution is performed in values and files inside the steps.",
                "additionalProperties": {
                    "type": [
                        "boolean",
                        "integer",
                        "number",
                        "string"
                    ]
                }
            }
        },
        "inputs": {
            "title": "Input variables",
            "description": "When starting a build via Wharf, you have the option to fill out input variables that are defined here.",
            "type": "array",
            "items": {
                "type": "object",
                "anyOf": [
                    {
                        "title": "Choice input",
                        "description": "Let's the user choose between the given options defined in the 'values' property.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                            "type",
                            "name",
                            "values"
                        ],
                        "properties": {
                            "type": {
                                "title": "Input type",
                                "type": "string",
                                "const": "choice"
                            },
                            "name": {
                                "title": "Input name",
                                "description": "This name is what's shown in the front-end for the user, as well as being available as a variable to be used inside most fields and inside referenced files (for example, inside kubectl.file) when written in the format of ${name-of-variable}. A simple string substitution is performed in values and files inside the steps.",
                                "type": "string"
                            },
                            "default": {
                                "title": "Input default value",
                                "description": "Default value that is pre-populated in the input in the front-end for the user when they start a new build.",
                                "type": "string"
                            },
                            "values": {
                                "title": "Input options for 'choose' type",
                                "description": "An array of string values that the user is presented with to choose between.",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    {
                        "title": "String/text input",
                        "description": "Let's the user enter a value in a free text input field.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                            "type",
                            "name"
                        ],
                        "properties": {
                            "type": {
                                "title": "Input type",
                                "type": "string",
                                "const": "string"
                            },
                            "name": {
                                "title": "Input name",
                                "description": "This name is what's shown in the front-end for the user, as well as being available as a variable to be used inside most fields and inside referenced files (for example, inside kubectl.file) when written in the format of ${name-of-variable}. A simple string substitution is performed in values and files inside the steps.",
                                "type": "string"
                            },
                            "default": {
                                "title": "Input default value",
                                "description": "Default value that is pre-populated in the input in the front-end for the user when they start a new build.",
                                "type": "string"
                            }
                        }
                    },
                    {
                        "title": "Password input",
                        "description": "Let's the user enter a value in a free text input field, but where the input is masked in the front-end. Semantically identical to the 'string' input type.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                            "type",
                            "name"
                        ],
                        "properties": {
                            "type": {
                                "title": "Input type",
                                "type": "string",
                                "const": "password"
                            },
                            "name": {
                                "title": "Input name",
                                "description": "This name is what's shown in the front-end for the user, as well as being available as a variable to be used inside most fields and inside referenced files (for example, inside kubectl.file) when written in the format of ${name-of-variable}. A simple string substitution is performed in values and files inside the steps.",
                                "type": "string"
                            },
                            "default": {
                                "title": "Input default value",
                                "description": "Default value that is pre-populated in the input in the front-end for the user when they start a new build.",
                                "type": "string"
                            }
                        }
                    },
                    {
                        "title": "Number input",
                        "description": "Let's the user enter a numeric value.",
                        "type": "object",
                        "additionalProperties": false,
                        "required": [
                            "type",
                            "name"
                        ],
                        "properties": {
                            "type": {
                                "title": "Input type",
                                "type": "string",
                                "const": "number"
                            },
                            "name": {
                                "title": "Input name",
                                "description": "This name is what's shown in the front-end for the user, as well as being available as a variable to be used inside most fields and inside referenced files (for example, inside kubectl.file) when written in the format of ${name-of-variable}. A simple string substitution is performed in values and files inside the steps.",
                                "type": "string"
                            },
                            "default": {
                                "title": "Input default value",
                                "description": "Default value that is pre-populated in the input in the front-end for the user when they start a new build.",
                                "type": [
                                    "number",
                                    "integer"
                                ]
                            }
                        }
                    }
                ]
            }
        }
    },
    "additionalProperties": {
        "title": "Wharf build stage",
        "description": "A build stage map/object. All stages will run in sequence of each other, and all stages shall include one or more build step. Build steps inside a build stage is specified by adding steps to this map/object.",
        "type": "object",
        "additionalProperties": {
            "title": "Wharf build step",
            "description": "Map/object for a Wharf build step. All steps are run in parallell of the other steps inside the same build stage. Specify the step type by adding a property inside this build step, for example 'container'. Build steps can only contain 1 step type.",
            "type": "object",
            "maxProperties": 1,
            "additionalProperties": false,
            "properties": {
                "docker": {
                    "title": "Docker build step type",
                    "description": "Build an image from a Dockerfile and push to a registry.",
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                        "file",
                        "tag"
                    ],
                    "properties": {
                        "file": {
                            "type": "string",
                            "description": "Dockerfile path, relative to the repository root.",
                            "examples": [
                                "src/api/Dockerfile"
                            ]
                        },
                        "tag": {
                            "type": "string",
                            "description": "Docker image tags to add to the image. Supports multiple tags by comma separation, and empty tags (0-length strings) will be silently ignored.",
                            "examples": [
                                "latest",
                                "${GIT_TAG}",
                                "latest,${GIT_COMMIT},${GIT_TAG}"
                            ]
                        },
                        "destination": {
                            "type": "string",
                            "description": "Full docker image name, including the optional host name. Defaults to using the formula `${registry}/${group}/${REPO_NAME}/${name}`, or simply `${registry}/${group}/${REPO_NAME}` if `${REPO_NAME}` and `${name}` are equal. If set, then the `docker.name`, `docker.group`, and `docker.registry` fields has no effect.",
                            "examples": [
                                "quay.io/iver-wharf/wharf-web",
                                "docker.io/wharfse/helm",
                                "harbor.local/myproject/myimage"
                            ]
                        },
                        "name": {
                            "type": "string",
                            "description": "Docker image name suffix. Defaults to the Wharf step name. Is used when composing the full Docker image name using the formula `${registry}/${group}/${REPO_NAME}/${name}`, or simply `${registry}/${group}/${REPO_NAME}` if `${REPO_NAME}` and `${name}` are equal."
                        },
                        "group": {
                            "type": "string",
                            "description": "Docker image name infix. Is used when composing the full Docker image name using the formula `${registry}/${group}/${REPO_NAME}/${name}`, or simply `${registry}/${group}/${REPO_NAME}` if `${REPO_NAME}` and `${name}` are equal.",
                            "default": "${REPO_GROUP}"
                        },
                        "context": {
                            "type": "string",
                            "description": "Docker build context path, relative to the repository root. Defaults to using the repository root.",
                            "default": ".",
                            "examples": [
                                ".",
                                "src/api"
                            ]
                        },
                        "secret": {
                            "type": "string",
                            "description": "Name of secret for credentials to the Docker registry used when pushing the image. Unused if `push` is set to false.",
                            "default": "gitlab-registry"
                        },
                        "registry": {
                            "type": "string",
                            "description": "Docker image name prefix. Is used when composing the full Docker image name using the formula `${registry}/${group}/${REPO_NAME}/${name}`, or simply `${registry}/${group}/${REPO_NAME}` if `${REPO_NAME}` and `${name}` are equal.",
                            "default": "${REG_URL}",
                            "examples": [
                                "https://harbor.local"
                            ]
                        },
                        "append-cert": {
                            "type": "boolean",
                            "description": "Wether or not to append certificates to the Docker image certificate store at /etc/ssl/certs/ca-certificates.crt. Enabled by default if the `${REPO_NAME}` starts with `default`."
                        },
                        "push": {
                            "type": "boolean",
                            "description": "Wether or not to push the build image. Can be useful to disable if you only need to test that the build actually succeeds.",
                            "default": true
                        },
                        "args": {
                            "type": "array",
                            "description": "List of Docker build arguments. Roughly translates to `docker build --build-arg ${args[0]} --build-arg ${args[1]} ...`.",
                            "items": {
                                "type": "string"
                            },
                            "examples": [
                                [
                                    "FIRST_ARG=Value from '.wharf-ci.yml' file!",
                                    "SECOND_ARG=12453125"
                                ]
                            ]
                        },
                        "secretName": {
                            "type": "string",
                            "description": "If specified, the target Kubernetes secret name will be mounted to be available for secret arguments via the secretArgs setting. The secret must have the name `wharf-${WHARF_INSTANCE}-project-${WHARF_PROJECT_ID}-secretname-${secretName}`.",
                            "default": null,
                            "examples": [
                                "myproject-system-tests-secret"
                            ]
                        },
                        "secretArgs": {
                            "type": "array",
                            "description": "List of secret Docker build arguments. Roughly translates to `docker build --build-arg ${args[0]} --build-arg ${args[1]} ...` but with the value switched out with the secret values from secretName.",
                            "items": {
                                "type": "string"
                            },
                            "examples": [
                                [
                                    "FIRST_SEC_ARG=mysecretkey1",
                                    "SECOND_SEC_ARG=mysecretkey2"
                                ]
                            ]
                        }
                    }
                },
                "container": {
                    "title": "Container build step type",
                    "description": "Run commands in a container.",
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                        "image",
                        "cmds"
                    ],
                    "properties": {
                        "image": {
                            "type": "string",
                            "description": "Docker image and tag to run the commands in",
                            "examples": [
                                "alpine:latest",
                                "${REG_URL}/some-project/some-image:latest"
                            ]
                        },
                        "cmds": {
                            "type": "array",
                            "description": "List of commands to invoke inside the container, in order.",
                            "items": {
                                "type": "string"
                            },
                            "examples": [
                                [
                                    "echo 'hello world'"
                                ]
                            ]
                        },
                        "os": {
                            "type": "string",
                            "description": "Wether to spin up a Windows or Linux Kubernetes pod to run the commands within. This requires your Kubernetes cluster to have nodes of the appropriate OS and labeled with `kubernetes.io/os`.",
                            "default": "linux",
                            "enum": [
                                "linux",
                                "windows"
                            ]
                        },
                        "shell": {
                            "type": "string",
                            "description": "Wharf will feed all commands into the TTY of this shell to run the commands. If left as `/bin/sh` but `os` is set to `windows` then this changes to `powershell.exe`.",
                            "default": "/bin/sh",
                            "examples": [
                                "/bin/sh"
                            ]
                        },
                        "certificatesMountPath": {
                            "type": "string",
                            "description": "If set, then Wharf will mount a Kubernetes ConfigMap (that has to be preconfigured in Wharf) to the target path set by this property. Useful when having to reach services that uses self-signed CA certificates.",
                            "examples": [
                                "/usr/local/share/ca-certificates"
                            ]
                        },
                        "secretName": {
                            "type": "string",
                            "description": "If specified, the target Kubernetes secret name will be mounted inside the container as environment variables. The secret must have the name `wharf-${WHARF_INSTANCE}-project-${WHARF_PROJECT_ID}-secretname-${secretName}`.",
                            "default": null,
                            "examples": [
                                "myproject-system-tests-secret"
                            ]
                        },
                        "serviceAccount": {
                            "type": "string",
                            "description": "Which Kubernetes service account to start up the pod with.",
                            "default": "default"
                        }
                    }
                },
                "kubectl": {
                    "title": "Kubectl build step type",
                    "description": "Run `kubectl apply -f` on a Kubernetes manifest.",
                    "type": "object",
                    "additionalProperties": false,
                    "anyOf": [
                        {
                            "required": [
                                "file"
                            ]
                        },
                        {
                            "required": [
                                "files"
                            ]
                        }
                    ],
                    "properties": {
                        "file": {
                            "type": "string",
                            "description": "Single file to let kubectl apply. Rougly translates to `kubectl apply -f ${file}`.",
                            "examples": [
                                "deploy/api.yaml"
                            ]
                        },
                        "files": {
                            "type": "array",
                            "description": "Multiple files to let kubectl apply. Rougly translates to `kubectl apply -f ${files[0]} -f ${files[1]} ...`.",
                            "items": {
                                "type": "string"
                            },
                            "examples": [
                                [
                                    "deploy/api.yaml"
                                ]
                            ]
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Target Kubernetes namespace for kubectl. Uses namespace set in the `cluster` config or the `metadata.namespace` property from the manifest files if omitted.",
                            "examples": [
                                "stage"
                            ]
                        },
                        "action": {
                            "type": "string",
                            "description": "What kubectl action/verb to operate. Roughly translates to `kubectl ${action} -f values.yml`.",
                            "default": "apply",
                            "examples": [
                                "apply",
                                "create",
                                "patch",
                                "delete",
                                "replace"
                            ]
                        },
                        "force": {
                            "type": "boolean",
                            "description": "Applies the `--force` flag to the kubectl command. Especially useful in combination with setting the `action` property to `replace`.",
                            "default": false
                        },
                        "cluster": {
                            "type": "string",
                            "description": "Which cluster kubeconfig to use. This has to be preconfigured when installing Wharf, and correlates to the Kubernetes ConfigMap names.",
                            "default": "kubectl-config",
                            "examples": [
                                "stage-cluster-config",
                                "prod-cluster-config"
                            ]
                        }
                    }
                },
                "helm": {
                    "title": "Helm-deploy build step type",
                    "description": "Install or upgrade a helm-chart.",
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                        "chart",
                        "name",
                        "namespace"
                    ],
                    "properties": {
                        "chart": {
                            "type": "string",
                            "description": "Helm chart name. This needs to match the name inside the Helm chart repository.",
                            "examples": [
                                "web-app",
                                "elasticsearch"
                            ]
                        },
                        "name": {
                            "type": "string",
                            "description": "Helm release name. This needs to matched the already deployed Helm release in your Kubernetes cluster, if you're hoping for it to make an upgrade.",
                            "examples": [
                                "test-deploy"
                            ]
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Target Kubernetes namespace that Helm will install/upgrade the Helm release into.",
                            "examples": [
                                "stage",
                                "default"
                            ]
                        },
                        "repo": {
                            "type": "string",
                            "description": "Helm chart repository to try fetch the Helm chart from. If this value starts with the same value as in ${CHART_REPO}, then the ${REG_USER} and ${REG_PASS} built-in variables will be used to authenticate with the chart repository.",
                            "default": "${CHART_REPO}/${REPO_GROUP}",
                            "examples": [
                                "https://harbor.local/chartrepo"
                            ]
                        },
                        "set": {
                            "type": "object",
                            "description": "Set/object where each key-value pair will be applied on top of the existing values.yaml settings used when deploying the Helm release. Translates to `helm install --set ${key}=${value}`.",
                            "examples": [
                                {
                                    "image.tag": "latest"
                                }
                            ]
                        },
                        "files": {
                            "type": "array",
                            "description": "List of Helm values filenames. Translates to `helm install --values ${files[2]} --values ${files[1]} --values ${files[0]}`.",
                            "items": {
                                "type": "string"
                            },
                            "examples": [
                                [
                                    "deploy/values.yaml"
                                ]
                            ]
                        },
                        "chartVersion": {
                            "type": "string",
                            "description": "Version of the Helm chart to use from the chart repository. If not specified, Wharf will use the latest Helm chart version.",
                            "examples": [
                                "0.1.22"
                            ]
                        },
                        "helmVersion": {
                            "type": "string",
                            "description": "Version of the Helm executable to use. See https://hub.docker.com/r/wharfse/helm/tags for the most up-to-date list.",
                            "default": "v2.14.1",
                            "examples": [
                                "v2.14.1",
                                "v3.0.2",
                                "v3.2.0",
                                "latest"
                            ]
                        },
                        "cluster": {
                            "type": "string",
                            "description": "Which cluster kubeconfig to use. This has to be preconfigured when installing Wharf, and correlates to the Kubernetes ConfigMap names.",
                            "default": "kubectl-config",
                            "examples": [
                                "stage-cluster-config",
                                "prod-cluster-config"
                            ]
                        }
                    }
                },
                "helm-package": {
                    "title": "Helm-package build step type",
                    "description": "Packages a sub-folder or repo into a helm-chart and pushes it to a chart-repository.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "version": {
                            "type": "string",
                            "description": "Overrides the Helm chart version of the packaged chart. If omitted, the packaged chart will use the version from its Chart.yaml file.",
                            "default": null,
                            "examples": [
                                "${GIT_TAG}",
                                "1.0.0"
                            ]
                        },
                        "chart-path": {
                            "type": "string",
                            "description": "Relative path from the repository root where to find the Helm chart source code. Defaults to assuming your Helm chart (with the Chart.yaml) is located at your repository root directory.",
                            "default": null,
                            "examples": [
                                "web-app"
                            ]
                        },
                        "destination": {
                            "type": "string",
                            "description": "Destination URI where the packaged Helm chart will be pushed. For authentication Wharf will use the `${REG_USER}` and `${REG_PASS}` built-in variables that has to be predefined elsewhere when installing Wharf.",
                            "default": "${CHART_REPO}/${REPO_GROUP}",
                            "examples": [
                                "https://harbor.local/chartrepo/default"
                            ]
                        }
                    }
                },
                "nuget-package": {
                    "title": "NuGet-package build step type",
                    "description": "Packages a .NET project into a NuGet and pushes it to a NuGet-repository.",
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                        "project-path",
                        "version",
                        "repo"
                    ],
                    "properties": {
                        "project-path": {
                            "type": "string",
                            "description": "Points to the .NET project path. Either point it directly to a `.*proj` (ex: .csproj or .fsproj) or a folder that contains 1 `.*proj`.",
                            "examples": [
                                "src/MyProject",
                                "src/MyProject/MyProject.csproj"
                            ]
                        },
                        "version": {
                            "type": "string",
                            "description": "Fed to `dotnet pack` via -p:Version=$version",
                            "examples": [
                                "${GIT_TAG}",
                                "1.0.0"
                            ]
                        },
                        "repo": {
                            "type": "string",
                            "description": "NuGet repository that Wharf will push the built NuGet package to.",
                            "examples": [
                                "http://nuget.local/libs/api/v2/package"
                            ]
                        },
                        "skip-duplicate": {
                            "type": "boolean",
                            "description": "If set to true, Wharf will silently continue if NuGet package of the same version already exists in the target NuGet repo.",
                            "default": false
                        },
                        "certificatesMountPath": {
                            "type":"string",
                            "description": "If set, then Wharf will mount a Kubernetes ConfigMap (that has to be preconfigured in Wharf) to the target path set by this property. Useful for mounting self-signed CA certificates that the target NuGet repository (see `repo` property) uses.",
                            "default": null,
                            "examples": [
                                "/usr/local/share/ca-certificates"
                            ]
                        }
                    }
                }
            }
        },
        "properties": {
            "environments": {
                "title": "Environments filter",
                "description": "Optionally specify an array of Wharf environment names, as specified in the global 'environments' map/object. If specified then only if the given environment that was used to start the build is included in this array, will this stage execute. Otherwise this stage will be skipped.",
                "type": [
                    "array",
                    "null"
                ],
                "items": {
                    "type": "string"
                },
                "uniqueItems": true
            }
        }
    }
}
